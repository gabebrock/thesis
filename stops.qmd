---
title: "stops"
output: html_document
---

```{r prepping doc and data}

# list of required packages
required_packages <- c("tidyverse", "readxl", "mapview", "sf", "tinytext", "textdata")

# check and install any missing packages
installed_packages <- rownames(installed.packages())
for (pkg in required_packages) {
  if (!pkg %in% installed_packages) {
    install.packages(pkg)
  }
}

# load libraries
library(tidyverse)
library(readxl)
library(mapview)
library(sf)

# load 2024 sqf data
# treating (null) values as NA values, for simplicity in the analysis. note that where NA appears in the data, it is because the officer there was no data for that fields not that, it was not applicable to the situation.
sqf2024 <- read_excel("r-data/nypd-stop/sqf-2024.xlsx", na = "(null)")

# tidy fields
sqf2024 <- sqf2024 %>%
  mutate(STOP_FRISK_DATE = as.Date(STOP_FRISK_DATE, origin = "1900-01-01"),
         STOP_LOCATION_X = as.numeric(STOP_LOCATION_X),
         STOP_LOCATION_Y = as.numeric(STOP_LOCATION_Y)) %>%
  filter(!is.na(SUSPECT_RACE_DESCRIPTION))

```

```{r quick stop analysis}

# stop breakdown, by race and arrest rate
stopsByRace <- sqf2024 %>% 
  group_by(SUSPECT_RACE_DESCRIPTION) %>%
  count() %>%
  ungroup()

# racial proportion of overall stops
stopsByRace <- stopsByRace %>%
  mutate(prop = round(n / sum(n), 2))

# stops by race, including stops that resulted in an arrest
stopsByRaceArrests <- sqf2024 %>% 
  group_by(SUSPECT_RACE_DESCRIPTION, SUSPECT_ARRESTED_FLAG) %>%
  count() %>%
  ungroup(SUSPECT_RACE_DESCRIPTION)

# proportion of overall stops that result in arrest, by race
stopsByRaceArrests <- stopsByRaceArrests %>%
  mutate(prop = round(n / sum(n), 2))


```

```{r stop analysis, by boro}

# stop breakdown, by race and boro
stopsByBoro <- sqf2024 %>% 
  group_by(SUSPECT_RACE_DESCRIPTION, STOP_LOCATION_BORO_NAME) %>%
  count() %>%
  ungroup(STOP_LOCATION_BORO_NAME)

# proportion of overall stops in each boro, by race
stopsByBoro <- stopsByBoro %>%
  mutate(prop = round(n / sum(n), 2))


```

```{r map of nyc}
# grab boro boundaries geoJSON file from NYC Planning website
# Borough Boundaries (Clipped to Shoreline)
# Date of Data: May 2025
  # https://www.nyc.gov/content/planning/pages/resources/datasets/borough-boundaries

# initialize geospatial data available at the geojson format
nyc_geojson <- tempfile(fileext = ".pgeojson")

# download boro boundaries json file
download.file(
  "https://services5.arcgis.com/GfwWNkhOj9bNBqoJ/arcgis/rest/services/NYC_Borough_Boundary/FeatureServer/0/query?where=1=1&outFields=*&outSR=4326&f=pgeojson",
  nyc_geojson)

# read the nyc json file to a shapefile
nyc_sf <- read_sf(nyc_geojson)

# plot the NYC map
nycMAP <- ggplot(nyc_sf) +
  geom_sf(fill = "white", color = "black", linewidth = 0.3) +
  theme_void()

```

```{r mapping stops to nyc map}

# convert coordinates from sqf data to sf object
stops2024_sf <- sqf2024 %>%
  drop_na(STOP_LOCATION_X, STOP_LOCATION_Y) %>%
  st_as_sf(coords = c("STOP_LOCATION_X", "STOP_LOCATION_Y"), crs = 2263) %>%
  st_transform(crs = 4326)

# dot stop map
nycMAP <- ggplot(nyc_sf) +
  geom_sf(fill = "white", color = "black", linewidth = 0.3) +
  geom_sf(
    data = stops2024_sf,
    aes(geometry = geometry, color = SUSPECT_RACE_DESCRIPTION),
    size = 0.25,
    alpha = 0.4) +         
  coord_sf(xlim = c(-74.3, -73.65), ylim = c(40.48, 40.95)) +
  theme_void() +
  scale_color_viridis_d(option = "B") +
  labs(color = "Suspect Race or Ethnicity") +
  theme(
    legend.key = element_rect(fill = NA, color = NA),         # remove default key background
    legend.key.size = unit(0.5, "cm"),                         # shrink key size
    legend.text = element_text(size = 7),                      # smaller labels
    legend.title = element_text(size = 8),                     # smaller title
    legend.spacing.y = unit(0.2, "cm"),                        # tighter vertical spacing
    legend.box.spacing = unit(0.3, "cm")                       # spacing around the legend box
  ) +
  guides(color = guide_legend(override.aes = list(shape = 15, size = 4)))  # squares
print(nycMAP)


```

```{r create map of nypd precincts}

# grab precinct boundaries geoJSON file from NYC Planning website
# Police Precincts (Clipped to Shoreline)
# Date of Data: May 2025
  # https://www.nyc.gov/content/planning/pages/resources/datasets/police-precincts

# initialize geospatial data available at the geojson format
nypd_geojson <- tempfile(fileext = ".pgeojson")

# download boro boundaries json file
download.file(
  "https://services5.arcgis.com/GfwWNkhOj9bNBqoJ/arcgis/rest/services/NYC_Police_Precincts/FeatureServer/0/query?where=1=1&outFields=*&outSR=4326&f=pgeojson",
  nypd_geojson)

# read the nyc json file to a shapefile
nypd_sf <- read_sf(nypd_geojson)

# format `Precinct` to match variable name in sqf dfs
nypd_sf$Precinct <- sprintf("%03d", as.integer(nypd_sf$Precinct))

# plot the NYPD map
nypdMAP <- ggplot(nypd_sf) +
  geom_sf(fill = "white", color = "black", linewidth = 0.3) +
  theme_void()

```

```{r load nypd precinct 2020 census data}

nypdCensus2020 <- read_csv("r-data/census/nyc_precinct_2020pop.csv")

# format `Precinct` to match variable name in sqf dfs
nypdCensus2020$precinct <- sprintf("%03d", as.integer(nypdCensus2020$precinct))

# census (only one race totals and total 2+ races)
nypdCensus2020Races <- nypdCensus2020 %>%
  select(precinct, P1_001N, P1_002N, P1_003N, P1_004N, P1_005N, P1_006N, P1_007N, P1_008N, P1_009N, P2_002N, P2_003N)

# precincts, proportion of black residents
nypdCensus2020Black <- nypdCensus2020 %>%
  select(precinct, P1_001N, P1_004N) %>%
  mutate(prop = round(P1_004N / P1_001N, 2))

```

```{r heat map of black NYC residents, by nypd precinct}

# join census data to spatial precinct data
nypd_sf <- nypd_sf %>%
  left_join(nypdCensus2020Black, by = c("Precinct" = "precinct"))

# plot heatmap of proportion Black, by precinct
blackHeatMap <- ggplot(nypd_sf) +
  geom_sf(aes(fill = prop), color = "white", linewidth = 0.3) +
  scale_fill_viridis_c(
    option = "rocket",
    name = "Proportion of Black Residents",
    labels = scales::label_percent(accuracy = 1),
    na.value = "gray90"
  ) +
  theme_void() +
  labs(title = "Proportion of Black NYC Residents, by NYPD Precinct")
print(blackHeatMap)

```

```{r heat map of black stops, by nypd precinct}

# census (only one race totals and total 2+ races)
sqf2024raceTotals <- sqf2024 %>%
  select(STOP_ID, STOP_LOCATION_PRECINCT, SUSPECT_RACE_DESCRIPTION) %>%
  group_by(STOP_LOCATION_PRECINCT) %>%
  count(SUSPECT_RACE_DESCRIPTION)

# precincts, proportion of black residents
sqf2024raceTotals <- sqf2024raceTotals %>%
  mutate(prop = round(n / sum(n), 2))

# filter to only include black stops
sqf2024raceBlack <- sqf2024raceTotals %>%
  filter(SUSPECT_RACE_DESCRIPTION == "BLACK")

# join census data to spatial precinct data
nypd_sf <- nypd_sf %>%
  rename(popPropBlack = prop) %>%
  left_join(sqf2024raceBlack, by = c("Precinct" = "STOP_LOCATION_PRECINCT")) %>%
  rename(stopPropBlack = prop)

# plot heatmap of proportion Black stops, by precinct
blackStopHeatMap <- ggplot(nypd_sf) +
  geom_sf(aes(fill = stopPropBlack), color = "white", linewidth = 0.3) +
  scale_fill_viridis_c(
    option = "rocket",
    name = "Proportion Black SQFs",
    labels = scales::label_percent(accuracy = 1),
    na.value = "gray90"
  ) +
  theme_void() +
  labs(title = "Proportion of Black NYC Residents, by NYPD Precinct")

print(blackHeatMap)
print(blackStopHeatMap)

```

```{r frisks by race, gender}

# calculate frisks by race
frisksByRace2024 <- sqf2024 %>%
  group_by(FRISKED_FLAG, SUSPECT_SEX, SUSPECT_RACE_DESCRIPTION) %>%
  drop_na(SUSPECT_SEX) %>%
  filter(SUSPECT_RACE_DESCRIPTION %in% c("BLACK", "BLACK HISPANIC", "WHITE HISPANIC", "WHITE")) %>%
  count() %>%
  ungroup() %>%
  mutate(prop = round(n / sum(n), 2))

# create subtotals by race
subtotals <- frisksByRace2024 %>%
  group_by(SUSPECT_SEX, SUSPECT_RACE_DESCRIPTION) %>%
  summarise(n = sum(n), .groups = "drop") %>%
  mutate(FRISKED_FLAG = "Subtotal")

# combine racial subtotals with original frisks table 
frisksByRace2024 <- bind_rows(frisksByRace2024, subtotals) %>%
  arrange(match(FRISKED_FLAG, c("Y", "N", "Subtotal")),
          match(SUSPECT_SEX, c("MALE", "FEMALE")),
          SUSPECT_RACE_DESCRIPTION)

# pivot wider
frisksByRace2024 <- frisksByRace2024 %>%
  mutate(cell = paste0(n, " (", scales::percent(n / sum(n), accuracy = 0.1), " of total stops)")) %>%
  select(FRISKED_FLAG, SUSPECT_SEX, SUSPECT_RACE_DESCRIPTION, cell) %>%
  pivot_wider(names_from = c(SUSPECT_RACE_DESCRIPTION, SUSPECT_SEX), values_from = cell)
frisksByRace2024

```

```{r searches by race, gender}

# calculate searches by race
searchesByRace2024 <- sqf2024 %>%
  group_by(SEARCHED_FLAG, SUSPECT_SEX, SUSPECT_RACE_DESCRIPTION) %>%
  drop_na(SUSPECT_SEX) %>%
  filter(SUSPECT_RACE_DESCRIPTION %in% c("BLACK", "BLACK HISPANIC", "WHITE HISPANIC", "WHITE")) %>%
  count() %>%
  ungroup() %>%
  mutate(prop = round(n / sum(n), 2))

# pivot wider
searchesByRace2024 <- searchesByRace2024 %>%
  arrange(match(SEARCHED_FLAG, c("Y", "N")),
          match(SUSPECT_SEX, c("MALE", "FEMALE"))) %>%
  mutate(cell = paste0(n, " (", scales::percent(n / sum(n), accuracy = 0.1), " of total stops)")) %>%
  select(SEARCHED_FLAG, SUSPECT_SEX, SUSPECT_RACE_DESCRIPTION, cell) %>%
  pivot_wider(names_from = c(SUSPECT_RACE_DESCRIPTION, SUSPECT_SEX),
              values_from = cell)

```

```{r frisks and searches by race tables}

frisksByRace2024
searchesByRace2024

```

```{r suspect demeanor description sentiment analysis}

library(tidytext)
library(textdata)

# unnest demeanor description, such that the sentiment analysis can work
# https://juliasilge.github.io/tidytext/reference/unnest_tokens.html
# need to figure out a way to make sure the token that's selected isn't erroneous (i.e. "officer", "and", "to", etc.)
stopDemeanorDesc2024 <- sqf2024 %>%
  select(STOP_ID, SUSPECT_RACE_DESCRIPTION, SUSPECT_SEX, DEMEANOR_OF_PERSON_STOPPED, FRISKED_FLAG, SEARCHED_FLAG) %>%
  unnest_tokens(DEMEANOR, DEMEANOR_OF_PERSON_STOPPED, token = "words")

# get sentiments from AFINN datasets
# The AFINN lexicon assigns words with a score that runs between -5 and 5, with negative scores indicating negative sentiment and positive scores indicating positive sentiment.

# calculate sentiment score of officer's description of subject's demeanor for each sto
stopDemeanorSentiment <- stopDemeanorDesc2024 %>%
  full_join(get_sentiments("afinn"), join_by(DEMEANOR == word)) %>% # parse through sentiment data set to find and token
  group_by(SUSPECT_RACE_DESCRIPTION) %>% # group by race
  drop_na(value) %>% # drop observations with no sentiment score
  summarize(mean = round(mean(value), 3)) # get mean score for each racial group

```

```{r custom glimpse}

custom_glimpse <- function(df) {
  data.frame(
    col_name = colnames(df),
    col_index = 1:ncol(df),
    col_class = sapply(df, class),
    row.names = NULL
  )
}

SQFvariables <- custom_glimpse(sqf2024)

```

```{r use of force}

# group all of the types of forces together
weaponForces <- c("PHYSICAL_FORCE_CEW_FLAG", "PHYSICAL_FORCE_DRAW_POINT_FIREARM_FLAG", "PHYSICAL_FORCE_OC_SPRAY_USED_FLAG", "PHYSICAL_FORCE_WEAPON_IMPACT_FLAG")

# handcuffForce <- c()

# otherForce <- c()

forces <- c("PHYSICAL_FORCE_CEW_FLAG", "PHYSICAL_FORCE_DRAW_POINT_FIREARM_FLAG", "PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG", "PHYSICAL_FORCE_OC_SPRAY_USED_FLAG", "PHYSICAL_FORCE_OTHER_FLAG", "PHYSICAL_FORCE_RESTRAINT_USED_FLAG", "PHYSICAL_FORCE_VERBAL_INSTRUCTION_FLAG", "PHYSICAL_FORCE_WEAPON_IMPACT_FLAG")

# create a new variable FORCE_FLAG if at least one FORCE variable is not (NULL)
forceByRace2024 <- sqf2024 %>%
  filter(SUSPECT_RACE_DESCRIPTION %in% c("BLACK", "BLACK HISPANIC", "WHITE HISPANIC", "WHITE")) %>%
  mutate(FORCE_FLAG = if_any(all_of(forces), ~ !is.na(.) & . != "(null)"),
         FORCE_WEAPON_FLAG = if_any(all_of(weaponForces), ~ !is.na(.) & . != "(null)"),
         PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG = recode(PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG,
                                                       "Y" = TRUE,
                                                       "N" = FALSE,
                                                       .default = NA),
         PHYSICAL_FORCE_OTHER_FLAG = recode(PHYSICAL_FORCE_OTHER_FLAG,
                                                       "Y" = TRUE,
                                                       "N" = FALSE,
                                                       .default = NA)
         )

# calculate counts and proportions of use of force
forceByRaceTotals2024 <- forceByRace2024 %>%
  group_by(SUSPECT_RACE_DESCRIPTION, FORCE_FLAG, FORCE_WEAPON_FLAG, PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG, PHYSICAL_FORCE_OTHER_FLAG) %>%
  count() %>%
  ungroup() %>%
  mutate(prop = round(n / sum(n), 3),
         cell = paste0(n, " (", prop, ")"))

forceByRaceTable2024 <- forceByRaceTotals2024 %>%
  select(FORCE_FLAG, FORCE_WEAPON_FLAG, PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG,
         PHYSICAL_FORCE_OTHER_FLAG, SUSPECT_RACE_DESCRIPTION, cell) %>%
  pivot_wider(
    names_from = SUSPECT_RACE_DESCRIPTION,
    values_from = cell,
    id_cols = c(FORCE_FLAG, FORCE_WEAPON_FLAG, PHYSICAL_FORCE_HANDCUFF_SUSPECT_FLAG, PHYSICAL_FORCE_OTHER_FLAG)
  )


```

```{r precinct-level variables}

# average population of each precinct
avgPop = nypdCensus2020Races %>%
  summarize(avg = round(mean(P1_001N), 0))

# average percent black of each precinct
pctBlack = nypdCensus2020Races %>%
  summarize(avg = round(mean(P1_004N/P1_001N), 4))

# average percent hispanic of each precinct
pctHispanic = nypdCensus2020Races %>%
  summarize(avg = round(mean(P2_002N/P1_001N), 4))

```

